(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{448:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return h}));var a=n(4),r=n(10),i=(n(0),n(707)),o={id:"symmetric-cryptography",title:"Symmetric Cryptography",description:"Overview of symmetric cryptography"},s={unversionedId:"symmetric-cryptography",id:"symmetric-cryptography",isDocsHomePage:!1,title:"Symmetric Cryptography",description:"Overview of symmetric cryptography",source:"@site/../docs/symmetric cryptography.md",slug:"/symmetric-cryptography",permalink:"/docs/next/symmetric-cryptography",editUrl:"https://github.com/vulnsystem/www.gitcoins.io/blob/documentation/website/../docs/symmetric cryptography.md",version:"current",lastUpdatedAt:1620899066,formattedLastUpdatedAt:"5/13/2021",sidebar:"docs",previous:{title:"Overview of SSL/TLS",permalink:"/docs/next/ssl-tls-overview"},next:{title:"Introduction",permalink:"/docs/next/getting-started"}},c=[{value:"Bit-flipping attack",id:"bit-flipping-attack",children:[]},{value:"Authenticated Encryption (AE)",id:"authenticated-encryption-ae",children:[{value:"The first step is to encrypt.",id:"the-first-step-is-to-encrypt",children:[]},{value:"The second step is to authenticate.",id:"the-second-step-is-to-authenticate",children:[]},{value:"Add some Associated Data (AD)",id:"add-some-associated-data-ad",children:[]},{value:"Decryption and MAC verification",id:"decryption-and-mac-verification",children:[]}]},{value:"Secret key exchange",id:"secret-key-exchange",children:[{value:"Key Derivation Function - KDF",id:"key-derivation-function---kdf",children:[]},{value:"Trapdoor function",id:"trapdoor-function",children:[]},{value:"Static or Ephemeral key?",id:"static-or-ephemeral-key",children:[]}]}],l={toc:c};function h(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Copyright: the following content is totally copy from the ",Object(i.b)("a",{parentName:"p",href:"https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd"},"TECHSCHOOL"),".")),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/symmetric-cryptography.png",alt:"TLS overview"})),Object(i.b)("p",null,"Alright, now let\u2019s learn more about symmetric cryptography. I guess you\u2019ve already known the basics.\nFirst of all, Alice has a plaintext message that she wants to send to Bob, but doesn\u2019t want any one in the public zone to read it.\nSo she encrypts the message with a secret key that they have shared with each other before. Then she sends the encrypted message to Bob via the public internet.\nUpon receiving the encrypted message, Bob will easily use the same secret key to decrypt it.\nSince the same key is used for encryption and decryption, it\u2019s kind of symmetric, so we have the name symmetric cryptography.\nNow there might be a hacker Harry, who can catch their exchanged message on the public network. However, the message is already encrypted, and Harry doesn\u2019t have the secret key, so he won\u2019t be able to decrypt it.\nBut he can still change it!"),Object(i.b)("h2",{id:"bit-flipping-attack"},"Bit-flipping attack"),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/bit-flipping.png",alt:"TLS overview"})),Object(i.b)("p",null,"There\u2019s one technique called bit-flipping attack that works like this:\nLet\u2019s say this time Alice is not talking to Bob, but talking to her online bank. And she wants to send 100 dollars to someone. The message is encrypted with a secret key and sent to the bank via the internet.\nNow Harry catches the encrypted message. Although he can\u2019t decrypt it, he can flip some of its bits from 1 to 0 and from 0 to 1, then forward that modified message to the bank.\nNow when the bank decrypts it, they will get a different plaintext content. In this case, it has become 900 dollars instead of 100.\nSo it\u2019s very dangerous. That\u2019s why we need to make sure that the encrypted message hasn\u2019t been altered during transmission."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"But how?")),Object(i.b)("h2",{id:"authenticated-encryption-ae"},"Authenticated Encryption (AE)"),Object(i.b)("p",null,"One way to do that is to use Authenticated Encryption. The idea is to not just encrypt, but also authenticate the encrypted message.\nAuthenticated Encryption"),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/ae.png",alt:"TLS overview"})),Object(i.b)("h3",{id:"the-first-step-is-to-encrypt"},"The first step is to encrypt."),Object(i.b)("p",null,"Alice\u2019s plaintext message goes through a symmetric encryption algorithm, such as AES-256-GCM or CHACHA20.\nThis encryption algorithm also takes a shared secret key and a random nonce, or an initialization vector (IV) as input. And it will return the encrypted message."),Object(i.b)("h3",{id:"the-second-step-is-to-authenticate"},"The second step is to authenticate."),Object(i.b)("p",null,"The encrypted message, the secret key, and the nonce become inputs of a MAC algorithm, such as GMAC if you use AES-256-GCM, or POLY1305 if you use CHACHA20 encryption algorithm.\nThis MAC algorithm acts like a cryptographic hash function, and its output is a MAC, or message authentication code.\nNow this MAC will be tagged along with the encrypted message, and the final result will be sent to Bob. Because of this, we sometimes call this MAC an authentication tag."),Object(i.b)("h3",{id:"add-some-associated-data-ad"},"Add some Associated Data (AD)"),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/ad.png",alt:"TLS overview"})),Object(i.b)("p",null,"In TLS 1.3, besides the encrypted message, we also want to authenticate some associated data, such as: the addresses, the ports, the protocol version, or the sequence number. This information is unencrypted and known by both communicating parties.\nSo the associated data is also an input of the MAC algorithm. And because of this, the whole process is called Authenticated Encryption with Associated Data, or in short, ",Object(i.b)("strong",{parentName:"p"}," AEAD "),"."),Object(i.b)("h3",{id:"decryption-and-mac-verification"},"Decryption and MAC verification"),Object(i.b)("p",null,"Now let's see how Bob can check that the encrypted message hasn\u2019t been changed during transmission."),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/decrypt.png",alt:"TLS overview"})),Object(i.b)("p",null,"It\u2019s simply a reverse process. Starting with the encrypted message with MAC, we untag the MAC from the encrypted message.\nThen the encrypted message will go to the MAC algorithm together with the shared secret key and the nonce. Note that this is the same nonce that is used in the encryption process. Usually the nonce is padded to the encrypted message before sending to the receiver.\nThe associated data will also go into the MAC algorithm. And the output of it will be another MAC."),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/verify.png",alt:"TLS overview"})),Object(i.b)("p",null,"Now Bob can simply compare the 2 MAC values. If they\u2019re different then he knows that the encrypted message has been changed. Else, he can safely decrypt the message and use it with the confident that it\u2019s the same plaintext message that Alice sent."),Object(i.b)("h2",{id:"secret-key-exchange"},"Secret key exchange"),Object(i.b)("p",null,"However, there\u2019s 1 question: How Bob and Alice share the secret key with each other without leaking it to the public?"),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/key-exchange.png",alt:"TLS overview"})),"Well, the answer is: they need to use asymmetric or public-key cryptography for that purpose. Specifically, they can use either Diffie-Hellman Ephemeral, or Elliptic-Curve Diffie-Hellman Ephemeral. ### Diffie-Hellman key exchange",Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/DH.png",alt:"TLS overview"})),Object(i.b)("p",null,"Let\u2019s see how Diffie Hellman key-exchange works!\nFirst, Alice and Bobs both agree on 2 numbers: the base g, and the modulus p. These numbers are known publicly by everyone.\nThen each of them secretly choose a private number. Alice\u2019s private key is number a, and Bob\u2019s private key is number b.\nThen Alice computes her public key and sends it to Bob:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"A = (g^a) mod p\n")),Object(i.b)("p",null,"Similarly, Bob computes his public key and sends it to Alice:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"}," B = (g^b) mod p\n")),Object(i.b)("p",null,"Then Alice will receive Bob\u2019s public key B, and Bob will receive Alice\u2019s public key A."),Object(i.b)("p",null,"Now the magic happens!"),Object(i.b)("p",null,"Alice computes:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"S = (B^a) mod p\n")),Object(i.b)("p",null,"Bob computes:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"S = (A^b) mod p\n")),Object(i.b)("p",null,"And these 2 values magically equal to the same number S."),Object(i.b)("p",null,"Why? Let's do the math:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"(B^a) mod p = (g^b)^a mod p = ( g^(b*a) ) mod p\n(A^b) mod p = (g^a)^b mod p = ( g^(a*b) ) mod p\n")),Object(i.b)("p",null,"So Alice and Bob come up with the same secret number S without leaking it to the public."),Object(i.b)("h3",{id:"key-derivation-function---kdf"},"Key Derivation Function - KDF"),Object(i.b)("p",null,"Each encryption algorithm may require a secret key of different length. So to make the secret key, Alice and Bob must put S to the same key derivation function (KDF), and the output will be a shared secret key of required length.\nIn TLS 1.3, we use a HMAC-based key derivation function, so that\u2019s why the name ",Object(i.b)("strong",{parentName:"p"}," HKDF "),"."),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/HKDF2.png",alt:"What is SSL/TLS."})),Object(i.b)("p",null,"Generally, the KDF takes following inputs:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"An input key material (or IKM). In our case, the IKM is the number S."),Object(i.b)("li",{parentName:"ul"},"How long we want the output key to be, such as 128-bit."),Object(i.b)("li",{parentName:"ul"},"A cryptographic hash function, such as HMAC-SHA256."),Object(i.b)("li",{parentName:"ul"},"Optionally some context or application-specific information"),Object(i.b)("li",{parentName:"ul"},"An optional salt.\nWith all of these inputs, KDF will produce a secret key of required length.")),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/HKDF1.png",alt:"What is SSL/TLS."}),Object(i.b)("figcaption",null,"Derive secret key")),Object(i.b)("h3",{id:"trapdoor-function"},"Trapdoor function"),Object(i.b)("p",null,"Now let's get back to the Diffie-Hellman key exchange.\nWe know that p, g, A, B are known to the public, which means the hacker, Harry, also has access to those numbers.\nWe may wonder: Is this key exchange mechanism secure? Or given p, g, A, B, can Harry figure out the secret numbers: a, b, S?"),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/trapdoor1.png",alt:"What is SSL/TLS."})),"Fortunately, these functions will be come trapdoors if we choose good values for p, g, a, b.",Object(i.b)("p",null,"For example:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Choose p as a 2048-bit prime number,"),Object(i.b)("li",{parentName:"ul"},"Choose g as a primitive root modulo p,"),Object(i.b)("li",{parentName:"ul"},"And choose a, b to be 256-bit random integers.")),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/trapdoor2.png",alt:"What is SSL/TLS."})),Object(i.b)("p",null,"A trapdoor function basically means it\u2019s easy to compute in one way but hard in the other. In this case:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Given p, g, a, its\u2019s easy to compute A."),Object(i.b)("li",{parentName:"ul"},"But given p, g, A, it\u2019s very hard to compute a.")),Object(i.b)("p",null,"It\u2019s easy to see that A can be computed pretty fast with O(log(a)) time complexity. It\u2019s a well-known Modular exponentiation problem.\nComputing a, on the other hand, is much harder. It\u2019s a Discrete logarithm problem, which takes our current-generation of computers a very long time to solve.\nSo we\u2019re at least safe for now, or until the next generation of strong quantum-computers comes into play.\nHowever, for now, \u201ca long time to solve\u201d doesn\u2019t mean unsolvable, right?"),Object(i.b)("h3",{id:"static-or-ephemeral-key"},"Static or Ephemeral key?"),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/static.png",alt:"What is SSL/TLS."})),Object(i.b)("p",null,"If Alice and Bob use the same private keys a, and b for every sessions that they communicate, then what happens is, Harry can record all of those sessions, and start solving for a from the session 1.\nAlthough it will take him a long time to solve it, let\u2019s say after session N, he gets the right a. Now he can use it to compute the secret number S, and thus, he would be able to decrypt all of the recorded conversations.\nDoes it sound scary? How can we prevent it?"),Object(i.b)("figure",null,Object(i.b)("img",{src:"/docs/assets/Security/ephemeral.png",alt:"What is SSL/TLS."})),Object(i.b)("p",null,"The answer is ephemeral key. As the name may suggest, we use different private key or each session. So even if Harry can solve the secret key for 1 session, he could not use it for other ones.\nThis is called perfect forward secrecy in TLS.\nSo now you understand what Diffie-Hellman Ephemeral means. It\u2019s just Diffie-Hellman with ephemeral or short-lived keys."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"}," How about Elliptic-Curve Diffie-Hellman Ephemeral? "),"\nelliptic-curve.png"))}h.isMDXComponent=!0},707:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),h=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=h(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=h(n),b=a,d=p["".concat(o,".").concat(b)]||p[b]||u[b]||i;return n?r.a.createElement(d,s(s({ref:t},l),{},{components:n})):r.a.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);