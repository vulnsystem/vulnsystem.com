(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{202:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return o})),t.d(n,"default",(function(){return u}));var r=t(4),a=t(10),c=(t(0),t(736)),i={id:"node-mutual-auth",title:"Node Mutual Auth",description:"To create node server and client with TLS"},s={unversionedId:"node-mutual-auth",id:"node-mutual-auth",isDocsHomePage:!1,title:"Node Mutual Auth",description:"To create node server and client with TLS",source:"@site/../docs/node-mutual-auth.md",slug:"/node-mutual-auth",permalink:"/docs/next/node-mutual-auth",editUrl:"https://github.com/vulnsystem/www.gitcoins.io/blob/documentation/website/../docs/node-mutual-auth.md",version:"current",lastUpdatedAt:1622993182,formattedLastUpdatedAt:"6/6/2021",sidebar:"docs",previous:{title:"gRPC Auth Labs",permalink:"/docs/next/grpc-auth-labs"},next:{title:"Introduction",permalink:"/docs/next/getting-started"}},o=[{value:"Generate secp256k1 key and EC certificates",id:"generate-secp256k1-key-and-ec-certificates",children:[]},{value:"Create node server",id:"create-node-server",children:[]},{value:"Access server with client",id:"access-server-with-client",children:[]},{value:"Try it out",id:"try-it-out",children:[]},{value:"Output of client",id:"output-of-client",children:[]},{value:"Source Code",id:"source-code",children:[]}],l={toc:o};function u(e){var n=e.components,i=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},l,i,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("img",{alt:"openssl",src:t(765).default})),Object(c.b)("p",null,"Now let's create  node server and client with TLS."),Object(c.b)("h3",{id:"generate-secp256k1-key-and-ec-certificates"},"Generate secp256k1 key and EC certificates"),Object(c.b)("p",null,"First to generate rsa private key and self-signed certificate for server and client. The detailed code and extension file can been found in the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/node-mutual-auth/"},"Opensslabs/node-mutual-auth")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:'title="/OpenssLabs/node-mutual-auth/credentials/gen.sh"',title:'"/OpenssLabs/node-mutual-auth/credentials/gen.sh"'},'# 1. Generate EC private key and self-signed certificate\nopenssl ecparam -genkey -out ca.key -name secp256k1\nopenssl req -x509 -new -key ca.key -out ca.cert -subj "/C=FR/ST=Occitanie/L=Toulouse/O=Tech School/OU=Education/CN=*.techschool.guru/emailAddress=root.guru@gmail.com"\n\necho "CA\'s self-signed certificate"\nopenssl x509 -in ca.cert -noout -text\n\n# 2. Generate web server\'s private key and certificate signing request (EC)\nopenssl ecparam -genkey -out server.key -name secp256k1\nopenssl req  -key server.key -new -out server.req -subj "/C=FR/ST=Ile de France/L=Paris/O=PC Book/OU=Computer/CN=*.pcbook.com/emailAddress=server@gmail.com"\n\n# 3. Use CA\'s private key to sign web server\'s CSR and get back the signed certificate\nopenssl x509 -req -in server.req -days 60 -CA ca.cert -CAkey ca.key -CAcreateserial -out server.cert -extfile server.ext\n\necho "Server\'s signed certificate"\nopenssl x509 -in server.cert -noout -text\n\n# 4. Generate client\'s private key and certificate signing request (EC)\nopenssl ecparam -genkey -out client.key -name secp256k1\nopenssl req -key client.key -new  -out client.req -subj "/C=FR/ST=Alsace/L=Strasbourg/O=PC Client/OU=Computer/CN=*.client.com/emailAddress=client@gmail.com"\n\n# 5. Use CA\'s private key to sign client\'s CSR and get back the signed certificate\nopenssl x509 -req -in client.req -days 60 -CA ca.cert -CAkey ca.key -CAcreateserial -out client.cert -extfile client.ext\n\necho "Client\'s signed certificate"\nopenssl x509 -in client.cert -noout -text\n\n# 6. To verify the server certificate aginst by root CA\necho "server\'s certificate verification"\nopenssl verify -show_chain -CAfile ca.cert server.cert\n\n# 7. To verify the client certificate aginst by root CA.\necho "client\'s certificate verification"\nopenssl verify -show_chain -CAfile ca.cert client.cert\n')),Object(c.b)("h3",{id:"create-node-server"},"Create node server"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="OpenssLabs/node-mutual-auth/server.js"',title:'"OpenssLabs/node-mutual-auth/server.js"'},"var tls = require('tls'),\n    fs = require('fs'),\n    msg = [\n            \".-..-..-.  .-.   .-. .--. .---. .-.   .---. .-.\",\n            \": :; :: :  : :.-.: :: ,. :: .; :: :   : .  :: :\",\n            \":    :: :  : :: :: :: :: ::   .': :   : :: :: :\",\n            \": :: :: :  : `' `' ;: :; :: :.`.: :__ : :; ::_;\",\n            \":_;:_;:_;   `.,`.,' `.__.':_;:_;:___.':___.':_;\"\n          ].join(\"\\n\").cyan;\n\nvar options = {\n  ca: fs.readFileSync('./credentials/ca.cert'),\n  key: fs.readFileSync('./credentials/server.key'),\n  cert: fs.readFileSync('./credentials/server.cert'),\n  ecdhCurve: 'secp256k1',\n  maxVersion: 'TLSv1.2',\n  ciphers: 'ECDHE-ECDSA-AES256-GCM-SHA384'\n};\n\ntls.createServer(options, function (s) {\n  s.write(msg+\"\\n\");\n  s.pipe(s);\n}).listen(8000);\n")),Object(c.b)("h3",{id:"access-server-with-client"},"Access server with client"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="OpenssLabs/node-mutual-auth/client.js',title:'"OpenssLabs/node-mutual-auth/client.js'},"var tls = require('tls'),\n    fs = require('fs');\n\nvar options = {\n  ca: fs.readFileSync('./credentials/ca.cert'),\n  key: fs.readFileSync('./credentials/client.key'),\n  cert: fs.readFileSync('./credentials/client.cert'),\n  ecdhCurve: 'secp256k1',\n  maxVersion: 'TLSv1.2',\n  ciphers: 'ECDHE-ECDSA-AES256-GCM-SHA384'\n};\n\nvar conn = tls.connect(8000, 'localhost', options, function() {\n  if (conn.authorized) {\n    console.log(\"Connection authorized by a Certificate Authority.\");\n  } else {\n    console.log(\"Connection not authorized: \" + conn.authorizationError)\n  }\n});\n\n// Send a friendly message\nconn.write(\"I am the client sending you a message.\");\n\nconn.on(\"data\", function (data) {\n  console.log('Receive:' + data.toString());\n  conn.end();\n});\n\nconn.on('close', function() {\n console.log(\"Connection closed\");\n});\n\nconn.on('error', function(error) {\n  console.error(error);\n  conn.destroy();\n});\n")),Object(c.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"The parameter ",Object(c.b)("strong",{parentName:"p"},"ecdhCurve and maxVersion")," is very import in this lab. The ",Object(c.b)("strong",{parentName:"p"},"secp256k1")," is not default elliptic curve supported by Openssl TLS1_3, So the curves and TLS version must be assigned. "))),Object(c.b)("h3",{id:"try-it-out"},"Try it out"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell"},"./gen.sh\nnode server.js //in one shell\nnode client.js //in anther shell\n")),Object(c.b)("h3",{id:"output-of-client"},"Output of client"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"Connection authorized by a Certificate Authority.\nReceive:undefined\n\nReceive:I am the client sending you a message.\nConnection closed\n")),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"If you want debug the TLS handshake, please export NODE_DEBUG=tls before start up server or client."))),Object(c.b)("h3",{id:"source-code"},"Source Code"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/node-mutual-auth/"},"The detaile code have been put into the github"),".\n",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/node-mutual-auth/credentials/gen.sh"},"gen.sh")," collect all the shell command, you can issue ./gen.sh to run all at a time."))}u.isMDXComponent=!0},736:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,b=d["".concat(i,".").concat(m)]||d[m]||p[m]||c;return t?a.a.createElement(b,s(s({ref:n},l),{},{components:t})):a.a.createElement(b,s({ref:n},l))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,i=new Array(c);i[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<c;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},765:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/openssl-685ed43c9e0088918381ee7415177c98.png"}}]);