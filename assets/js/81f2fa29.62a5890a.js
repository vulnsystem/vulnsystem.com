(window.webpackJsonp=window.webpackJsonp||[]).push([[331],{428:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return o})),r.d(t,"default",(function(){return b}));var i=r(4),n=r(10),c=(r(0),r(713)),a={id:"openssl-labs",title:"Openssl Labs",description:"The labs to create and verify certificates"},s={unversionedId:"openssl-labs",id:"openssl-labs",isDocsHomePage:!1,title:"Openssl Labs",description:"The labs to create and verify certificates",source:"@site/../docs/openssl-labs.md",slug:"/openssl-labs",permalink:"/docs/next/openssl-labs",editUrl:"https://github.com/vulnsystem/www.gitcoins.io/blob/documentation/website/../docs/openssl-labs.md",version:"current",lastUpdatedAt:1621175639,formattedLastUpdatedAt:"5/16/2021",sidebar:"docs",previous:{title:"Create Certificates",permalink:"/docs/next/create-certificates"},next:{title:"Browser Authority",permalink:"/docs/next/browser-authority"}},o=[{value:"Generate and verify secp256k1 certificate",id:"generate-and-verify-secp256k1-certificate",children:[{value:"Root (EC) cert",id:"root-ec-cert",children:[]},{value:"Server&#39;s cert request",id:"servers-cert-request",children:[]},{value:"Server&#39;s cert",id:"servers-cert",children:[]},{value:"Client&#39;s cert request",id:"clients-cert-request",children:[]},{value:"Client&#39;s cert",id:"clients-cert",children:[]},{value:"Verify the server certificate aginst by root CA",id:"verify-the-server-certificate-aginst-by-root-ca",children:[]},{value:"verify the client certificate aginst by root CA.",id:"verify-the-client-certificate-aginst-by-root-ca",children:[]},{value:"Source Code",id:"source-code",children:[]}]},{value:"Generate and verify secp256r1 certificate",id:"generate-and-verify-secp256r1-certificate",children:[]},{value:"A chain of trust",id:"a-chain-of-trust",children:[{value:"Root (RSA) cert",id:"root-rsa-cert",children:[]},{value:"Intermediate cert request",id:"intermediate-cert-request",children:[]},{value:"Intermediate cert",id:"intermediate-cert",children:[]},{value:"Leaf cert request",id:"leaf-cert-request",children:[]},{value:"Leaf cert",id:"leaf-cert",children:[]},{value:"verify the trust chain",id:"verify-the-trust-chain",children:[]}]}],l={toc:o};function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(c.b)("wrapper",Object(i.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("img",{alt:"openssl",src:r(768).default})),Object(c.b)("p",null,"Now let's create and verify the certificates with openssl."),Object(c.b)("h2",{id:"generate-and-verify-secp256k1-certificate"},"Generate and verify secp256k1 certificate"),Object(c.b)("h3",{id:"root-ec-cert"},"Root (EC) cert"),Object(c.b)("p",null,"First to generate EC private key and self-signed certificate"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'openssl ecparam -genkey -out ca.key -name secp256k1 \nopenssl req -x509 -new -key ca.key -out ca.cert -subj "/C=FR/ST=Occitanie/L=Toulouse/O=Tech School/OU=Education/CN=*.techschool.guru/emailAddress=root.guru@gmail.com"\n')),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Notive: To assign ",Object(c.b)("strong",{parentName:"p"},"secp256k1")," as name of openssl ecparam genkey.")),Object(c.b)("h3",{id:"servers-cert-request"},"Server's cert request"),Object(c.b)("p",null,"Second to generate web server's private key and certificate signing request (EC)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'openssl ecparam -genkey -out server.key -name secp256k1 \nopenssl req  -key server.key -new -out server.req -subj "/C=FR/ST=Ile de France/L=Paris/O=PC Book/OU=Computer/CN=*.pcbook.com/emailAddress=server@gmail.com"\n')),Object(c.b)("h3",{id:"servers-cert"},"Server's cert"),Object(c.b)("p",null,"Third to use CA's private key to sign web server's CSR and get back the signed certificate of server"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl x509 -req -in server.req -days 60 -CA ca.cert -CAkey ca.key -CAcreateserial -out server.cert -extfile server.ext\n")),Object(c.b)("h3",{id:"clients-cert-request"},"Client's cert request"),Object(c.b)("p",null,"Fourth to generate client's private key and certificate signing request (EC)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'openssl ecparam -genkey -out client.key -name secp256k1 \nopenssl req -key client.key -new  -out client.req -subj "/C=FR/ST=Alsace/L=Strasbourg/O=PC Client/OU=Computer/CN=*.client.com/emailAddress=client@gmail.com"\n')),Object(c.b)("h3",{id:"clients-cert"},"Client's cert"),Object(c.b)("p",null,"Fifth to use CA's private key to sign client's CSR and get back the signed certificate of client"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl x509 -req -in client.req -days 60 -CA ca.cert -CAkey ca.key -CAcreateserial -out client.cert -extfile client.ext\n")),Object(c.b)("h3",{id:"verify-the-server-certificate-aginst-by-root-ca"},"Verify the server certificate aginst by root CA"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl verify -show_chain -CAfile ca.cert server.cert\n")),Object(c.b)("h3",{id:"verify-the-client-certificate-aginst-by-root-ca"},"verify the client certificate aginst by root CA."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl verify -show_chain -CAfile ca.cert client.cert\n")),Object(c.b)("h3",{id:"source-code"},"Source Code"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpensslCertificateVerify/blob/main/secp256k1/"},"The detaile code have been put into the github"),".\n",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpensslCertificateVerify/blob/main/secp256k1/gen.sh"},"gen.sh")," collect all the shell command, you can issue ./gen.sh to run all at a time."),Object(c.b)("h2",{id:"generate-and-verify-secp256r1-certificate"},"Generate and verify secp256r1 certificate"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"The same as ",Object(c.b)("strong",{parentName:"p"},"secp256r1"),", if you want to reuse these code with secp256r1, please go through ",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpensslCertificateVerify/blob/main/secp256r1/"},"the detailed infomation in github"),".")),Object(c.b)("h2",{id:"a-chain-of-trust"},"A chain of trust"),Object(c.b)("p",null,"In these lab, we create root, intermediate and leaf certificate. The intermediate's certificate signed by root's and leaf's certificate signed by intermediate's. "),Object(c.b)("h3",{id:"root-rsa-cert"},"Root (RSA) cert"),Object(c.b)("p",null,"First to generate root authority's private key and self-signed certificate."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'openssl req -x509 -newkey rsa:4096 -days 365 -nodes -keyout root.key -out root.cert -subj "/CN=localhost/emailAddress=root@gmail.com" \n')),Object(c.b)("h3",{id:"intermediate-cert-request"},"Intermediate cert request"),Object(c.b)("p",null,"Second to generate intermediate authorities's private key and certificate signing request (CSR)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'openssl req -newkey rsa:4096 -nodes -keyout intermediate.key -out intermediate.req -subj "/CN=localhost/emailAddress=intermediate@gmail.com"\n')),Object(c.b)("h3",{id:"intermediate-cert"},"Intermediate cert"),Object(c.b)("p",null,"Third to use root's private key to sign intermediate's CSR and get back the signed certificate of intermediate."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl x509 -req -in intermediate.req -days 60 -CA root.cert -CAkey root.key -CAcreateserial -out intermediate.cert -extfile intermediate.ext\n")),Object(c.b)("p",null,"Notice basicConstraints atrribute in intermediate.ext should be assigned as following."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-name=intermediate.ext"},"subjectAltName=DNS:*.pcbook.com,DNS:*.pcbook.org,IP:0.0.0.0\nbasicConstraints=CA:TRUE,pathlen:0\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"CA:TRUE means it is a intermediate CA and allow the CA to issue certificates. If the CA value not be assigned, the default value FALSE will be assigned.")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"pathlen:0 does still allow the CA to issue certificates, but these certificates must be end-entity-certificates.It also implies that with this certificate, the CA must not issue intermediate CA certificates .")),Object(c.b)("h3",{id:"leaf-cert-request"},"Leaf cert request"),Object(c.b)("p",null,"Fourth to generate end-entity leaf's private key and certificate signing request (CSR)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'openssl req -newkey rsa:4096 -nodes -keyout leaf.key -out leaf.req -subj "/CN=localhost/emailAddress=leaf@gmail.com"\n')),Object(c.b)("h3",{id:"leaf-cert"},"Leaf cert"),Object(c.b)("p",null,"Fifty ot use intermediate's private key to sign leaf's CSR and get back the signed certificate of leaf"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl x509 -req -in leaf.req -days 60 -CA intermediate.cert -CAkey intermediate.key -CAcreateserial -out leaf.cert -extfile leaf.ext\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Notice basicConstraints atrribute in leaf.ext have been assigned defaultly ",Object(c.b)("strong",{parentName:"p"},"(FALSE)"),". ")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-name=leaf.ext"},"subjectAltName=DNS:*.pcbook.com,DNS:*.pcbook.org,IP:0.0.0.0\n")),Object(c.b)("h3",{id:"verify-the-trust-chain"},"verify the trust chain"),Object(c.b)("p",null,"To verify the leaf certificate aginst by intermediate CA"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"intermediate's certificate verification against root certificate\"")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl verify -show_chain -CAfile root.cert intermediate.cert leaf.cert\n")),Object(c.b)("ol",{start:2},Object(c.b)("li",{parentName:"ol"},"Partial chain verifiication: to verify leaf's certificate against intermediate certificate")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl verify -show_chain -partial_chain -trusted intermediate.cert leaf.cert\n")),Object(c.b)("ol",{start:3},Object(c.b)("li",{parentName:"ol"},"Full chain verifiication: to verify leaf's certificate against intermediate and root certificate")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl verify -show_chain -CAfile root.cert -untrusted intermediate.cert leaf.cert\n")))}b.isMDXComponent=!0},713:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return f}));var i=r(0),n=r.n(i);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},c=Object.keys(e);for(i=0;i<c.length;i++)r=c[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)r=c[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=n.a.createContext({}),b=function(e){var t=n.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=b(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,c=e.originalType,a=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=b(r),d=i,f=u["".concat(a,".").concat(d)]||u[d]||p[d]||c;return r?n.a.createElement(f,s(s({ref:t},l),{},{components:r})):n.a.createElement(f,s({ref:t},l))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=r.length,a=new Array(c);a[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<c;l++)a[l]=r[l];return n.a.createElement.apply(null,a)}return n.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},768:function(e,t,r){"use strict";r.r(t),t.default=r.p+"assets/images/openssl-685ed43c9e0088918381ee7415177c98.png"}}]);