(window.webpackJsonp=window.webpackJsonp||[]).push([[550],{637:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return p}));var s=n(4),r=n(10),c=(n(0),n(736)),a={id:"openssl-server",title:"Openssl Server",description:"To create server and client with openssl"},i={unversionedId:"openssl-server",id:"openssl-server",isDocsHomePage:!1,title:"Openssl Server",description:"To create server and client with openssl",source:"@site/../docs/openssl-server.md",slug:"/openssl-server",permalink:"/docs/next/openssl-server",editUrl:"https://github.com/vulnsystem/www.gitcoins.io/blob/documentation/website/../docs/openssl-server.md",version:"current",lastUpdatedAt:1625555205,formattedLastUpdatedAt:"7/6/2021",sidebar:"docs",previous:{title:"Openssl Labs",permalink:"/docs/next/openssl-labs"},next:{title:"Browser Authentication",permalink:"/docs/next/browser-authentication"}},o=[{value:"RSA openssl server",id:"rsa-openssl-server",children:[{value:"Generate rsa key and certificates",id:"generate-rsa-key-and-certificates",children:[]},{value:"Create server with openssl",id:"create-server-with-openssl",children:[]},{value:"Access server with client",id:"access-server-with-client",children:[]},{value:"The output of handshake",id:"the-output-of-handshake",children:[]},{value:"Test connection",id:"test-connection",children:[]},{value:"Source Code",id:"source-code",children:[]}]},{value:"secp256k1 openssl server",id:"secp256k1-openssl-server",children:[{value:"Generate secp256k1 key and EC certificates",id:"generate-secp256k1-key-and-ec-certificates",children:[]},{value:"Create server with openssl",id:"create-server-with-openssl-1",children:[]},{value:"Access server with client",id:"access-server-with-client-1",children:[]},{value:"The output of handshake",id:"the-output-of-handshake-1",children:[]},{value:"Test connection",id:"test-connection-1",children:[]},{value:"Source Code",id:"source-code-1",children:[]}]},{value:"secp256r1 openssl server",id:"secp256r1-openssl-server",children:[{value:"Source Code",id:"source-code-2",children:[]}]}],l={toc:o};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(s.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("img",{alt:"openssl",src:n(765).default})),Object(c.b)("p",null,"Now let's create server and client with Openssl."),Object(c.b)("h2",{id:"rsa-openssl-server"},"RSA openssl server"),Object(c.b)("h3",{id:"generate-rsa-key-and-certificates"},"Generate rsa key and certificates"),Object(c.b)("p",null,"First to generate rsa private key and self-signed certificate for server and client. The detailed code and extension file can been found in the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/rsa"},"Opensslabs/rsa")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:'title="/OpenssLabs/rsa/gen.sh"',title:'"/OpenssLabs/rsa/gen.sh"'},'# 1. Generate server CA\'s private key and self-signed certificate\nopenssl req -x509 -newkey rsa:4096 -days 365 -nodes -keyout ca.key -out ca.cert -subj "/CN=localhost/emailAddress=ca@gmail.com"\n\necho "CA\'s self-signed certificate"\nopenssl x509 -in ca.cert -noout -text\n\n# 2. Generate web server\'s private key and certificate signing request (CSR)\nopenssl req -newkey rsa:4096 -nodes -keyout server.key -out server.req -subj "/CN=localhost/emailAddress=server@gmail.com"\n\n# 3. Use CA\'s private key to sign web server\'s CSR and get back the signed certificate\nopenssl x509 -req -in server.req -days 60 -CA ca.cert -CAkey ca.key -CAcreateserial -out server.cert -extfile server.ext\n\necho "Server\'s signed certificate"\nopenssl x509 -in server.cert -noout -text\n\n# 4. To verify the server certificate aginst by root CA\necho "server\'s certificate verification"\nopenssl verify -show_chain -CAfile ca.cert server.cert\n\n# 5. Generate web client\'s private key and certificate signing request (CSR)\nopenssl req -newkey rsa:4096 -nodes -keyout client.key -out client.req -subj "/CN=localhost/emailAddress=client@gmail.com"\n\n# 6. Use CA\'s private key to sign web client\'s CSR and get back the signed certificate\nopenssl x509 -req -in client.req -days 60 -CA ca.cert -CAkey ca.key -CAcreateserial -out client.cert -extfile client.ext\n\necho "client\'s signed certificate"\nopenssl x509 -in client.cert -noout -text\n\n# 7. To verify the client\'s certificate aginst by root CA\necho "client\'s certificate verification"\nopenssl verify -show_chain -CAfile ca.cert client.cert\n\n')),Object(c.b)("h3",{id:"create-server-with-openssl"},"Create server with openssl"),Object(c.b)("p",null,"Please use ",Object(c.b)("a",{parentName:"p",href:"https://www.openssl.org/docs/man1.1.1/man1/openssl-s_server.html"},"openssl s_server")," to create the server."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell"},"openssl s_server -accept 20000 -cert server.cert -key server.key  -debug -tlsextdebug\n")),Object(c.b)("h3",{id:"access-server-with-client"},"Access server with client"),Object(c.b)("p",null,"Please use ",Object(c.b)("a",{parentName:"p",href:"https://www.openssl.org/docs/man1.1.1/man1/openssl-s_client.html"},"openssl s_client")," to make connection."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell"},"openssl s_client -showcerts -connect localhost:20000  -CAfile ca.cert  -cert client.cert -key client.key\n")),Object(c.b)("h3",{id:"the-output-of-handshake"},"The output of handshake"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"Server certificate\nsubject=CN = localhost, emailAddress = server@gmail.com\nissuer=CN = localhost, emailAddress = ca@gmail.com\n\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\nSSL handshake has read 2139 bytes and written 391 bytes\nVerification: OK\nNew, TLSv1.3, **Cipher is TLS_AES_256_GCM_SHA384**\nServer public key is 4096 bit\nSecure Renegotiation IS NOT supported\nCompression: NONE\nExpansion: NONE\n\n")),Object(c.b)("h3",{id:"test-connection"},"Test connection"),Object(c.b)("p",null,"Please input any string in the server console, then the string will send to the client and be showed in the client's consloe."),Object(c.b)("h3",{id:"source-code"},"Source Code"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/rsa"},"The detaile code have been put into the github"),".\n",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/rsa/gen.sh"},"gen.sh")," collect all the shell command, you can issue ./gen.sh to run all at a time."),Object(c.b)("h2",{id:"secp256k1-openssl-server"},"secp256k1 openssl server"),Object(c.b)("h3",{id:"generate-secp256k1-key-and-ec-certificates"},"Generate secp256k1 key and EC certificates"),Object(c.b)("p",null,"First to generate rsa private key and self-signed certificate for server and client. The detailed code and extension file can been found in the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/secp256k1"},"Opensslabs/secp256k1")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:'title="/OpenssLabs/secp256k1/gen.sh"',title:'"/OpenssLabs/secp256k1/gen.sh"'},'# 1. Generate EC private key and self-signed certificate\nopenssl ecparam -genkey -out ca.key -name secp256k1\nopenssl req -x509 -new -key ca.key -out ca.cert -subj "/C=FR/ST=Occitanie/L=Toulouse/O=Tech School/OU=Education/CN=*.techschool.guru/emailAddress=root.guru@gmail.com"\n\necho "CA\'s self-signed certificate"\nopenssl x509 -in ca.cert -noout -text\n\n# 2. Generate web server\'s private key and certificate signing request (EC)\nopenssl ecparam -genkey -out server.key -name secp256k1\nopenssl req  -key server.key -new -out server.req -subj "/C=FR/ST=Ile de France/L=Paris/O=PC Book/OU=Computer/CN=*.pcbook.com/emailAddress=server@gmail.com"\n\n# 3. Use CA\'s private key to sign web server\'s CSR and get back the signed certificate\nopenssl x509 -req -in server.req -days 60 -CA ca.cert -CAkey ca.key -CAcreateserial -out server.cert -extfile server.ext\n\necho "Server\'s signed certificate"\nopenssl x509 -in server.cert -noout -text\n\n# 4. Generate client\'s private key and certificate signing request (EC)\nopenssl ecparam -genkey -out client.key -name secp256k1\nopenssl req -key client.key -new  -out client.req -subj "/C=FR/ST=Alsace/L=Strasbourg/O=PC Client/OU=Computer/CN=*.client.com/emailAddress=client@gmail.com"\n\n# 5. Use CA\'s private key to sign client\'s CSR and get back the signed certificate\nopenssl x509 -req -in client.req -days 60 -CA ca.cert -CAkey ca.key -CAcreateserial -out client.cert -extfile client.ext\n\necho "Client\'s signed certificate"\nopenssl x509 -in client.cert -noout -text\n\n# 6. To verify the server certificate aginst by root CA\necho "server\'s certificate verification"\nopenssl verify -show_chain -CAfile ca.cert server.cert\n\n# 7. To verify the client certificate aginst by root CA.\necho "client\'s certificate verification"\nopenssl verify -show_chain -CAfile ca.cert client.cert\n')),Object(c.b)("h3",{id:"create-server-with-openssl-1"},"Create server with openssl"),Object(c.b)("p",null,"Please use ",Object(c.b)("a",{parentName:"p",href:"https://www.openssl.org/docs/man1.1.1/man1/openssl-s_server.html"},"openssl s_server")," to create the server."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl s_server -accept 20000 -cert server.cert -key server.key  -debug -tlsextdebug -curves secp256k1 -tls1_2\n")),Object(c.b)("h3",{id:"access-server-with-client-1"},"Access server with client"),Object(c.b)("p",null,"Please use ",Object(c.b)("a",{parentName:"p",href:"https://www.openssl.org/docs/man1.1.1/man1/openssl-s_client.html"},"openssl s_client")," to make connection."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"openssl s_client -showcerts -connect localhost:20000  -CAfile ca.cert  -cert client.cert -key client.key -curves secp256k1 -tls1_2\n")),Object(c.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"The parameter -curves secp256k1 -tls1_2 is very import in this lab. The secp256k1 is not default elliptic curve supported by Openssl TLS1_3, So the curves and TLS version must be assigned. As you know the secp256r1 is default elliptic curve supported by Openssl, So the shell command for server and client are same as rsa's."))),Object(c.b)("h3",{id:"the-output-of-handshake-1"},"The output of handshake"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"Server certificate\nsubject=CN = localhost, emailAddress = server@gmail.com\nissuer=CN = localhost, emailAddress = ca@gmail.com\n\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: ECDSA\nServer Temp Key: ECDH, secp256k1, 256 bits\nSSL handshake has read 1085 bytes and written 330 bytes\nVerification: OK\nNew, TLSv1.2, Cipher is **ECDHE-ECDSA-AES256-GCM-SHA384**\nServer public key is 256 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\n")),Object(c.b)("h3",{id:"test-connection-1"},"Test connection"),Object(c.b)("p",null,"Please input any string in the server console, then the string will send to the client and be showed in the client's consloe."),Object(c.b)("h3",{id:"source-code-1"},"Source Code"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/secp256k1"},"The detaile code have been put into the github"),".\n",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/secp256k1/gen.sh"},"gen.sh")," collect all the shell command, you can issue ./gen.sh to run all at a time."),Object(c.b)("h2",{id:"secp256r1-openssl-server"},"secp256r1 openssl server"),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"secp256r1")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"As you know the ",Object(c.b)("strong",{parentName:"p"},"secp256r1")," is default elliptic curve supported by Openssl TLS 1_3, So the shell command for server and client are same as rsa's.\nThe parameter ",Object(c.b)("strong",{parentName:"p"},"-curves secp256k1 -tls1_2")," is not needed."))),Object(c.b)("h3",{id:"source-code-2"},"Source Code"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/secp256r1"},"The detaile code have been put into the github"),".\n",Object(c.b)("a",{parentName:"p",href:"https://github.com/vulnsystem/OpenssLabs/tree/main/secp256r1/gen.sh"},"gen.sh")," collect all the shell command, you can issue ./gen.sh to run all at a time."))}p.isMDXComponent=!0},736:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var s=n(0),r=n.n(s);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},c=Object.keys(e);for(s=0;s<c.length;s++)n=c[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(s=0;s<c.length;s++)n=c[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,c=e.originalType,a=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=s,h=d["".concat(a,".").concat(u)]||d[u]||b[u]||c;return n?r.a.createElement(h,i(i({ref:t},l),{},{components:n})):r.a.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var c=n.length,a=new Array(c);a[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var l=2;l<c;l++)a[l]=n[l];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},765:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/openssl-685ed43c9e0088918381ee7415177c98.png"}}]);